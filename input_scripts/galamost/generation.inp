#!/usr/bin/python
import sys
import math
import argparse

parser = argparse.ArgumentParser(description='obtain the namestring and usic name.')
parser.add_argument('-EXEPATH', type=str,nargs=1,
                   help='directory of the galamost package')
parser.add_argument('-input_data', type=str,nargs=1,
                   help='path of the input data file')
parser.add_argument('-dt', type=float,nargs=1,
                   help='time unit')
parser.add_argument('-temp', type=float,nargs=1,
                   help='temperature')
parser.add_argument('-NumBondPoints', type=int,nargs=1,
                   help='')
parser.add_argument('-BondTable', type=str,nargs=1,
                   help='')
parser.add_argument('-NumAnglePoints', type=int,nargs=1,
                   help='')
parser.add_argument('-AngleTable', type=str,nargs=1,
                   help='')
parser.add_argument('-NumNonbondPoints', type=int,nargs=1,
                   help='')
parser.add_argument('-BoxSize', type=float,nargs=1,
                   help='')
parser.add_argument('-GridSize', type=float,nargs=1,
                   help='')
parser.add_argument('-Kappa', type=float,nargs=1,
                   help='')
parser.add_argument('-FrictionCoeffcient', type=float,nargs=1,
                   help='')
parser.add_argument('-thermo_period', type=int,nargs=1,
                   help='')
parser.add_argument('-savefreq', type=float,nargs=1,
                   help='')
parser.add_argument('-run', type=int,nargs=1,
                   help='')
args = parser.parse_args()


sys.path.append(args.EXEPATH[0]) # the path where the GALAMOST program is installed
import galamost


filename = args.input_data[0]# initial configuration file
build_method = galamost.XmlReader(filename)
#build_method = galamost.BinaryReader(filename)
perform_config = galamost.PerformConfig(0)# assign GPU by index
all_info = galamost.AllInfo(build_method,perform_config)# build system information
 
dt = args.dt[0]
app = galamost.Application(all_info, dt)# build up an application with system information and integration time-step

# bond stretching interaction by harmonic potential
bondforce = galamost.BondForceTable(all_info,1500)
bondforce.setPotential('1',  "/home/zwu/coarse-graining/IBI/polyisoprene_400K/test_MD2/forcefield/bond.pot.table.gala", 0,1) #kj/mol A
app.add(bondforce)

# angle bending interaction 
angleforce = galamost.AngleForceTable(all_info,1801)
angleforce.setPotential('1',  "/home/zwu/coarse-graining/IBI/polyisoprene_400K/test_MD2/forcefield/angle.pot.table.gala", 0,1) #kj/mol
app.add(angleforce)

boxsize=args.BoxSize[0]
gridsize=args.GridSize[0]
kappa=args.Kappa[0]

GridSize=int(boxsize/gridsize)
scf = galamost.MdScfForce(all_info, GridSize   ,    GridSize,    GridSize, kappa)#(mx,my,mz,compressibility)
scf.setParams('1', '1',  0)#(chi)
scf.setPeriodScf( 1,  1)#(idl2_step, idl_step)
scf.setNewVersion(True)
app.add(scf)

Temperature = args.temp[0]  #k
T = Temperature*8.3143/1000.0#reduced unit

group = galamost.ParticleSet(all_info, "all")# a collection of particles

comp_info = galamost.ComputeInfo(all_info, group)  # calculating system informations, such as temperature, pressure, and momentum
thermo = galamost.BdNvt(all_info,group,T, 12345)
thermo.setGamma(args.FrictionCoeffcient[0])
app.add(thermo)



DInfo = galamost.DumpInfo(all_info, comp_info, "./generation/screen/thermo.log")# output system informations, such as temperature, pressure, and momentum
DInfo.setPeriod(args.thermo_period[0])
app.add(DInfo)
app.setInitTimestep(0)

save_frequency=int(args.savefreq[0]*args.run[0])

xml = galamost.XmlDump(all_info, "./generation/restart/gen_restart") # output the configuration files in xml format
xml.setPeriod(save_frequency)# (period)
xml.setOutputBond(True)
xml.setOutputImage(True)
xml.setOutputAngle(True)
xml.setOutputVelocity(True)
xml.setOutputMass(True)
app.add(xml)

#cstrj=galamost.CustomDump(all_info, "./generation/trajectory",False)
#cstrj.setPeriod(10000)# (period)
#app.add(cstrj)

app.run(args.run[0])#(the number of steps to run)